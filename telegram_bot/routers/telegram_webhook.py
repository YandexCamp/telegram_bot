from fastapi import APIRouter, Request, HTTPException
from telegram import Update, Bot
from telegram.ext import Application, ContextTypes
import logging
import os
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

# Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
TELEGRAM_SERVICE_URL = os.getenv(
    "TELEGRAM_SERVICE_URL",
    "http://localhost:9999/api/telegram_bot")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot: Optional[Bot] = None
application: Optional[Application] = None


def get_bot():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    global bot
    if not bot and TELEGRAM_BOT_TOKEN:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
    return bot


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é YandexGPT!"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
    )


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    import requests
    try:
        response = requests.get(f"{TELEGRAM_SERVICE_URL}/status", timeout=5)
        if response.status_code == 200:
            status_data = response.json()
            await update.message.reply_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_data['status']}\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {status_data['message']}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    chat_id = update.message.chat_id
    message_text = update.message.text
    username = update.effective_user.username

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username}): {message_text}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        import requests

        message_data = {
            "chat_id": chat_id,
            "user_id": user_id,
            "message_text": message_text,
            "username": username
        }

        response = requests.post(
            f"{TELEGRAM_SERVICE_URL}/",
            json=message_data,
            timeout=30
        )

        if response.status_code == 200:
            result = response.json()
            await update.message.reply_text(
                result["response_text"],
                parse_mode=result.get("parse_mode", "HTML")
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞: {response.status_code}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )


@router.post("/webhook")
async def webhook(request: Request):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, get_bot())

        if update:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if update.message:
                if update.message.text:
                    if update.message.text.startswith('/'):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                        if update.message.text.startswith('/start'):
                            await start_command(update, None)
                        elif update.message.text.startswith('/help'):
                            await help_command(update, None)
                        elif update.message.text.startswith('/status'):
                            await status_command(update, None)
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        await handle_message(update, None)

        return {"status": "ok"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/set-webhook")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        raise HTTPException(
            status_code=500,
            detail="TELEGRAM_BOT_TOKEN not set")

    if not WEBHOOK_URL:
        raise HTTPException(status_code=500, detail="WEBHOOK_URL not set")

    try:
        bot = get_bot()
        webhook_url = f"{WEBHOOK_URL}/api/telegram_bot/webhook"

        result = await bot.set_webhook(url=webhook_url)

        if result:
            return {
                "status": "success",
                "message": f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}",
                "webhook_url": webhook_url
            }
        else:
            raise HTTPException(
                status_code=500,
                detail="Failed to set webhook")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error setting webhook: {
                str(e)}")


@router.get("/delete-webhook")
async def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        raise HTTPException(
            status_code=500,
            detail="TELEGRAM_BOT_TOKEN not set")

    try:
        bot = get_bot()
        result = await bot.delete_webhook()

        if result:
            return {
                "status": "success",
                "message": "Webhook —É–¥–∞–ª–µ–Ω"
            }
        else:
            raise HTTPException(
                status_code=500,
                detail="Failed to delete webhook")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error deleting webhook: {
                str(e)}")


@router.get("/webhook-info")
async def get_webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
    if not TELEGRAM_BOT_TOKEN:
        raise HTTPException(
            status_code=500,
            detail="TELEGRAM_BOT_TOKEN not set")

    try:
        bot = get_bot()
        webhook_info = await bot.get_webhook_info()

        return {
            "status": "success",
            "webhook_info": {
                "url": webhook_info.url,
                "has_custom_certificate": webhook_info.has_custom_certificate,
                "pending_update_count": webhook_info.pending_update_count,
                "last_error_date": webhook_info.last_error_date,
                "last_error_message": webhook_info.last_error_message,
                "max_connections": webhook_info.max_connections,
                "allowed_updates": webhook_info.allowed_updates
            }
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error getting webhook info: {
                str(e)}")
